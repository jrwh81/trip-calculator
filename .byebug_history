c
exit
con[1]
con[0]
c
con[1]
con[0]
ind
con
c
i
con[2]
con[1]
con[0]
con[0][0]
con
c
@contributions
c
@contributions
c
@contributions
c
@contributions
c
@contributions
c
params
all_contributions
totals
c
trip.travelers.count
(trip.total_cost - all_contributions[0][1]).to_f - (trip.total_cost - all_contributions[1][1]).to_f
(trip.total_cost - all_contributions[1][1]).to_f
(trip.total_cost - all_contributions[0][1]).to_f
all_contributions[0][1] - trip.total_cost
all_contributions[0][1]
all_contributions[0]
all_contributions
c
@contributions
c
@contributions
c
@contribution.to_f
@contribution
c
@contribution.to_f
@contribution
c
t
c
traveler_1
c
trip.travelers
trip.total_cost.to_f
trip.total_cost.to_i
trip.total_cost
trip
c
trip.travelers
trip
c
params
c
params
c
exspense_params.merge(trip_id: params[:exspense][:trip_id], travler_id: current_traveler.id)
exspense_params.merge(travler_id: current_traveler.id)
exspense_params.merge(trip_id: params[:exspense][:trip_id])
exspense_params.merge(trip_id: params[:exspense][:trip_id]
exspense_params
@exspense
params
c
params[:format]
params
c
params
c
params
c
params
c
params
c
params
c
current_traveler.trips.add
current_traveler.trips
current_traveler
c
params
params["first_name"]
params[first_name]
params[:first_name]
params
c
params
current_user
current_traveler
c
params
@traveler
c
@traveler.confirmed?
@traveler.confirm!
@traveler.confirm
@traveler.save!
traveler.save!
@traveler
c
current_traveler
